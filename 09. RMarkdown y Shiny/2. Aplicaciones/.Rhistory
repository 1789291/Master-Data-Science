shiny::runApp('Aplicacion_MFZ')
runApp('Aplicacion_MFZ')
faithful
x    <- faithful[, 2]
runApp('Aplicacion_MFZ')
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)  # Defino el número de bins (que estará en base al input)
bins <- seq(min(x), max(x), length.out = 4 + 1)  # Defino el número de bins (que estará en base al input)
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)  # Defino los límites de los bins (que estará en base al input)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(  # Esto es una función que dentro tiene las cosas relativas a UI
# Application title
titlePanel("Old Faithful Geyser Data"),  # Título
# Sidebar with a slider input for number of bins
sidebarLayout(  # Barra lateral. Siempre contiene sidebarPanel y mainPanel
sidebarPanel(  # Panel de la barra lateral
sliderInput("bins",  # Etiqueta
"Number of bins:",  # Nombre que aparece en pantalla
min = 1,  # Rangos del slider
max = 50,
value = 20)
),
# Show a plot of the generated distribution
mainPanel(  # Tenemos un panel principal
plotOutput("distPlot")  # Etiqueta
)
)
)
# Run the application
shinyApp(ui = ui, server = server)
runApp('Aplicacion_MFZ')
runApp('Aplicacion_MFZ')
runApp('Aplicacion_MFZ')
runApp('Aplicacion_MFZ')
runApp('Aplicacion_MFZ')
runApp('Aplicacion_MFZ')
library(ggplot2)
runApp('Aplicacion_size_puntos')
faithful
ggplot(faithful) +
aes(x=eruptions, y=waiting)
ggplot(faithful) +
aes(x=eruptions, y=waiting) +
geom_point()
ggplot(faithful) +
aes(x=eruptions, y=waiting) +
geom_point(size = 3)
runApp('Aplicacion_size_puntos')
runApp('Aplicacion_size_puntos')
runApp('Aplicacion_size_puntos')
runApp('Aplicacion_size_puntos')
runApp('Aplicacion_size_puntos')
runApp('Aplicacion_size_puntos')
runApp('Prueba_multiple_file')
runApp('sencillo')
runApp('reactividad')
runApp('sencillo')
runApp('sencillo')
runApp('sencillo')
runApp('sencillo')
runApp('sencillo')
runApp('sencillo')
runApp('sencillo')
runApp('sencillo')
runApp('interfaz')
runApp('interfaz')
runApp('interfaz')
runApp('interfaz')
runApp('interfaz')
runApp('interfaz')
runApp('interfaz')
runApp('interfaz')
runApp('interfaz')
runApp('interfaz2')
runApp('interfaz2')
runApp('interfaz2')
runApp('interfaz2')
runApp('inputs')
runApp('reactividad')
runApp('reactividad')
runApp('reactividad')
runApp('reactividad')
runApp('reactividad')
runApp('reactividad')
runApp('reactividad')
runApp('reactividad')
runApp('guardar')
install.packages('rvest')
library(rvest)
install.packages('tidytext')
head(gapminder)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(gapminder) +
aes(x = gdpPercap, y = lifeExp, size = pop, fill = continent) +
geom_point()
require(ggplot2)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
require(dplyr)
gapminder_year <- gapminder %>% filter(year = 1976)
gapminder_year <- gapminder %>% filter(year == 1976)
source('~/.active-rstudio-document', echo=TRUE)
gapminder_year <- gapminder %>% filter(year == 2000)
df <- gapminder
View(df)
gapminder_year <- df %>% filter(year == 1952)
ggplot(gapminder_year) +
aes(x = gdpPercap, y = lifeExp, size = pop, color = continent) +
geom_point()
gapminder_year <- df %>% filter(year == 1960)
gapminder_year <- df %>% filter(year == 1952)
gapminder_year <- df %>% filter(year == 1953)
unique(gapminder$year)
gapminder_year <- df %>% filter(year == 1957)
ggplot(gapminder_year) +
aes(x = gdpPercap, y = lifeExp, size = pop, color = continent) +
geom_point()
gapminder_year <- df %>% filter(year == 1962)
ggplot(gapminder_year) +
aes(x = gdpPercap, y = lifeExp, size = pop, color = continent) +
geom_point()
shiny::runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
summary(gapminder$lifeExp)
runApp('Ejercicio_GDP')
summary(gapminder$gdpPercap)
View(gapminder_year)
gapminder$gdpPercap
gapminder
df_sin_kuw <- gapminder %>% filter(!country == 'Kuwait')
arrange(gapminder$gdpPercap)
range(gapminder$gdpPercap
range(gapminder$gdpPercap)
source('~/.active-rstudio-document', echo=TRUE)
gapminder %>% select(country) %>% arrange(gdpPercap)
gapminder %>% select(country, gdpPercap) %>% arrange(gdpPercap)
gapminder %>% select(country, gdpPercap) %>% arrange(gdpPercap, desc())
gapminder %>% select(country, gdpPercap) %>% arrange(desc(gdpPercap))
runApp('Ejercicio_GDP')
df_sin_kuw %>% select(country, gdpPercap) %>% arrange(desc(gdpPercap))
df_sin_kuw %>% select(country, gdpPercap) %>% arrange(asc(gdpPercap))
df_sin_kuw %>% select(country, gdpPercap) %>% arrange(gdpPercap)
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
unique(2017)
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
runApp('Ejercicio_GDP')
shiny::runApp('sencillo')
runApp('Aplicacion_MFZ')
runApp('Aplicacion_MFZ')
runApp('Aplicacion_size_puntos')
runApp('interfaz')
runApp('inputs')
runApp('interfaz2')
runApp('Prueba_multiple_file')
runApp('sencillo')
runApp('guardar')
runApp('Ejercicio_GDP')
